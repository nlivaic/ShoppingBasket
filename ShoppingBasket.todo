✔ Shared Kernel testovi @done (10. 11. 2019. 11:23:39)
    ✔ Ne možeš izgraditi sa default idjem @done (10. 11. 2019. 11:23:39)
    ✔ Equality radi po Id. @done (10. 11. 2019. 11:23:38)
✔ Shopping Basket Service @done (10. 11. 2019. 18:03:38)
    ✔ Logic @done (10. 11. 2019. 18:02:23)
    ✔ Tests - move tests to standalone file. Foo Foo @done (10. 11. 2019. 18:02:23)
☐ Logging
✔ All domain classes should override ToString() @done (10. 11. 2019. 18:48:26)
✔ Extract LinqExtensions to SharedKernel and write tests. @done (10. 11. 2019. 18:29:55)
✔ ShoppingBasketBuilder1 rename to ShoppingBasketBuilder @done (10. 11. 2019. 18:29:57)
☐ DI Helper.
✔ Service to ShoppingBasketBuilder @done (10. 11. 2019. 19:19:06)
    ✔ All tests green? @done (10. 11. 2019. 19:19:03)
    ✔ Move service tests to shopping basket tests. @done (10. 11. 2019. 19:19:04)
    ✔ New tests: add item. @done (10. 11. 2019. 19:19:05)
☐ Napraviti sve testove kao u zadatku (scenarios).
☐ ShoppingBasketServiceTests are now empty.
☐ Dovršiti Release Notes "Usage".
✔ Shopping Basket testovi se referiraju na varijablu discountedItems makar često u testu nije discounted. @done (10. 11. 2019. 19:18:58)

☐ Release Notes

### Architecture

Library is a DDD-ish implementation of a typical Shopping Basket.

#### Shopping Basket

Shopping Basket can be created by adding a list of items and discounts. Additional items can be added on-the-fly, triggering recalculation of discounts.

Items are a represenation of a single unit of a specific product. So two milks would be represented by two separate `Item` objects. Having items one by one facilitated determining the scope of each discount. Shopping Basket is a container of Items.

Discounts have several important characteristics:
    * Requirements: list of products required in order to trigger the discount.
    * Target: single product the discount is applied to.
    * Scope: concatenation of Requirements and Target, used to determine whether items in a Shopping Basket can be combined to trigger a discount.
    * Price reduction: a discount percentage.

Products are just that, products.

#### Shared Kernel

Basic functionalities for every entity and value object can be found here. This covers:

    * Identity property
    * Equality (by identity for entities and by property values for value objects).
    * Equality operator overloads.

### Scenarios

Scenarios are implemented as part of `ShoppingBasket.Core.Tests/ShoppingBasketScenarios.cs`.

### Unit Tests ###

Cover all the above domain classes and shared kernel.

### Usage

Compiling:

ASP.NET Core integration:

    // To Do